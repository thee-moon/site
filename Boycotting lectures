
#include <iostream> 
#include <limits.h> 
#include <list> 
using namespace std; 

 
int x; 
 
void dfsUtil(int node, int count, bool visited[], 
				int& maxCount, list<int>* adj) 
{ 
	visited[node] = true; 
	count++; 
	for (auto i = adj[node].begin(); i != adj[node].end(); ++i) { 
		if (!visited[*i]) { 
			if (count >= maxCount) { 
				maxCount = count; 
				x = *i; 
			} 
			dfsUtil(*i, count, visited, maxCount, adj); 
		} 
	} 
}  
void dfs(int node, int n, list<int>* adj, int& maxCount) 
{ 
	bool visited[n + 1]; 
	int count = 0; 
 
	for (int i = 1; i <= n; ++i) 
		visited[i] = false; 
  
	dfsUtil(node, count + 1, visited, maxCount, adj); 
}  
int diameter(list<int>* adj, int n) 
{ 
	int maxCount = INT_MIN; 
 
	dfs(1, n, adj, maxCount); 
 
	dfs(x, n, adj, maxCount); 

	return maxCount; 
} 
 
int main() 
{ 
    int t;
    cin>>t;
    while(t--){

    
	int n ;
    cin>>n;

	list<int>* adj = new list<int>[n + 1]; 

    int x,y;

	for(int i=0;i<n-1;i++){
        cin>>x>>y;
        // cout<<x<<y<<endl;
	adj[x].push_back(y); 
	adj[y].push_back(x);  
    }


	/* maxCount will have diameter of tree */
	cout << diameter(adj, n) << endl; 

    }
} 
